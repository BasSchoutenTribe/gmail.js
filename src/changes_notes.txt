
Content of this pull request :
------------------------------

 - Fix issue #589 with a parsing of embedded JSON data (see more details below)
 - Extend XHR parsing data with a parsing of /bv request
 - Extend email cache : update cache and not only append new email in cache
 - Refactoring function name (parse_fd_email2, parse_fd_email)


Changes :
---------


    Fix issue #589
    --------------

    Important : content-script which launch injected script must be configured with "run_at": "document_start" 
    It's recommand to split injected script to have only gmail.js to load in first because size of injected script impact the loadind time.
    Gmail.js must be injected and loaded before Gmail load embedded data.

    api.tools.embedded_data_watcher override Gmail JS function "_GM_setData"
    There is 2 different parsing (like XHR) : parse_fd_embedded_json and parse_bv_embedded_json


    Extend XHR parsing data with a parsing of /bv request
    -----------------------------------------------------

    Like /fd request parsing, implement of /bv request parsing.

    Extend email cache : update cache and not only append new email in cache
    ------------------------------------------------------------------------

    Update function api.tools.cache_email_data


More details :
-------------

In Gmail, there are 2 methods to load thread and email data.
    1) embedded data
    2) XHR

When you load Gmail UI with default URL (like https://mail.google.com or https://mail.google.com) the default view displayed 
is the inbox view, in this case, sequence is STEP 1 and STEP 2A

If you load Gmail UI with personnalized URL (like https://mail.google.com/mail/u/0/#sent), the wiew display depend on the URL.
in this case, sequence is STEP 1 and STEP 2B.


STEP 1 :
--------

This step is mandatory because it's automatic when loading Gmail UI.

Thread and email data for INBOX (BUT NOT ONLY these datas) can partially be read in JSON embedded data from text/html content request.
IT IS NOT an XHR...

First Http request is on https://mail.google.com/mail/u/0/, the response is a document text/html.
In the body of HTML content, we can find an iframe.
Example :
<body jscontroller="hS6RLb" jsmodel="utMpr" jsaction="............">
<iframe id="embedded_data_iframe" src="https://mail.google.com/mail/u/0/data?sw=2&amp;token=%5B%22cftp%22........." class="invfr" aria-hidden="true"></iframe>

When iframe is loaded, the document is text/html and contain javascript function and JSON embedded data
Example :
<html><body><script nonce="5schwSe/q2lcOQe6UONGRw">var AF_initDataKeys = []
; var AF_dataServiceRequests = {}; var AF_initDataChunkQueue = []; var AF_initDataCallback; var AF_initDataInitializeCallback;
[.........]
top._GM_setData({"a6jdv":[["sils",null,"{\"1\":{\"1\":[{\"2\":\"thread-f:1660422955941527830\......


The SECOND JS function in document "top._GM_setData({"a6jdv":...})" load ALL thread and email data requisite to display the inbox_content view.
If inbox_content view display 50 thread or email also JSON contains the 50 thread or email.
It is not detail datas requisite to display the view_email or view_thread.
We can see later in description than is like "/sync/u/0/bv" request.

The FOURTH JS function "top._GM_setData({"Cl6csf":...})" contains detail data of the FIVE FIRST thread or email.
The FIVE FIRST thread or email data are never load with XHR, only with embedded data.
We can see later in description than is like "/sync/u/0/fd" request.



STEP 2:
-------

The sequence of STEP2 is different, it'a serie of XHR request.
Different xhr request with the path "/sync/u/0" are observe.

My comprehension of XHR fonctionnal use :

https://mail.google.com/sync/u/0/i/bv   => contains global data requisite to display a list of thread and email list
https://mail.google.com/sync/u/0/i/fd   => contains detail data requisite to display a specific thread and email 
https://mail.google.com/sync/u/0/i/s    => contains data only if there is new datas for thread and email already load
https://mail.google.com/sync/u/0/el2    => //TODO, need investigation

STEP 2A :
--------

This step concern the case of loading GMail UI on inbox view.
Global thread and email datas and five thread and email detail datas are loaded in STEP1.

Below an example of sequence :

T0 is the moment when user make one action to load inbox Gmail and nothing else.

For the case that inbox_content view display 50 threads in "Primary" tab, 2 thread in "Promotions" tab and 1 thread in "Notification" tab
=> T1 : T0 + 10s
X requests /fd to read data for the last 45 thread of "Primary" tab
1 request /bv with no thread data
=>20 seconds passed

=> T2 : T1 + 2min
1 request /s with the 25 first message (need a verification...) all tabs concerned
1 request /bv with no thread data
2 request /s with no thread data
1 request /fd with the 3 thread of "Promotions" tab and  "Notification" tab

=> T3 : T2 + 2min
1 request /s with no thread data

=> T4 : T3 + 2min
1 request /s with no thread data



STEP 2B :
--------

This step concern the case of loading GMail UI on other view than inbox.
Global thread and email datas and five thread and email detail datas are loaded in STEP1 but there not used.

T0 is the moment when user make one action to load inbox Gmail and nothing else
For the case that view display 50 threads:
T0 :
1 request /bv with the 50 thread and email data
X requests /fd to read data for the 50 thread
